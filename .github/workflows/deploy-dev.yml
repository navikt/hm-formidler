name: Build, deploy to & dev-gcp and create release

on:
  push:
    paths-ignore:
      - '**.md'
      - '.gitignore'
      - 'LICENCE'
      - 'CODEOWNERS'
    branches:
      - main
      - ikke-feilmelding-på-slettet-sak
      - styling-endringer-og-darkside

jobs:
  deploy:
    name: Build and deploy
    permissions:
      contents: write
      id-token: write
      packages: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Pre-deploy
        uses: navikt/digihot-deploy/actions/pre-deploy@v3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Tilgjengeliggjør READER_TOKEN for npm
        run: |
          echo '//npm.pkg.github.com/:_authToken='${{ secrets.READER_TOKEN }} >> .npmrc

      - name: Build and push docker image
        uses: nais/docker-build-push@v0
        id: docker-build-push
        with:
          team: teamdigihot
          identity_provider: ${{ secrets.NAIS_WORKLOAD_IDENTITY_PROVIDER }}
          project_id: ${{ vars.NAIS_MANAGEMENT_PROJECT_ID }}
          tag: ${{ env.VERSION_TAG }}

      - name: Deploy to dev-gcp (intern)
        uses: nais/deploy/actions/deploy@v2
        env:
          CLUSTER: dev-gcp
          RESOURCE: .nais/dev-intern.yaml
          PRINT_PAYLOAD: true
          VAR: commit=${{ github.sha }}
          IMAGE: ${{steps.docker-build-push.outputs.image}}

      - name: Deploy to dev-gcp (ekstern)
        uses: nais/deploy/actions/deploy@v2
        env:
          CLUSTER: dev-gcp
          RESOURCE: .nais/dev-ekstern.yaml
          PRINT_PAYLOAD: true
          VAR: commit=${{ github.sha }}
          IMAGE: ${{steps.docker-build-push.outputs.image}}

      - name: post-deploy
        if: github.ref == 'refs/heads/main'
        uses: navikt/digihot-deploy/actions/post-deploy@v3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create release
        if: github.ref == 'refs/heads/main'
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.VERSION_TAG }}
          release_name: ${{ env.APPLICATION }} ${{ env.VERSION_TAG }}
          body: ${{ env.CHANGE_LOG }}
          draft: true
          prerelease: false
